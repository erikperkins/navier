apiVersion: v1
kind: Namespace
metadata:
  name: mlflow
---
apiVersion: v1
kind: Service
metadata:
  name: mlflow
  namespace: mlflow
spec:
  ports:
    - name: http
      port: 5000
      targetPort: 5000
  selector:
    app: mlflow
  clusterIP: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow
  namespace: mlflow
spec:
  selector:
    matchLabels:
      app: mlflow
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mlflow
    spec:
      securityContext:
        fsGroup: 1000
      containers:
        - name: mlflow
          image: ghcr.io/mlflow/mlflow
          imagePullPolicy: IfNotPresent
          command: [/bin/bash]
          args:
            - -c
            - "pip install boto3 psycopg2-binary; mlflow server --host 0.0.0.0 --artifacts-destination s3://models --backend-store-uri postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres.mlflow.svc.cluster.local:5432/mlflow"
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: postgresUser
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: postgresPassword
            - name: MLFLOW_S3_ENDPOINT_URL
              value: http://minio.minio.svc.cluster.local:9000
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: minioAccessKey
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: minioSecretKey
          ports:
            - containerPort: 5000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mlflow
  namespace: mlflow
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    cert-manager.io/acme-challenge-type: http01
spec:
  tls:
    - hosts:
        - mlflow.cauchy.link
      secretName: letsencrypt-prod
  rules:
    - host: mlflow.cauchy.link
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: mlflow
                port:
                  name: http